Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815

Compiler options: -c -Wall -Werror -align -funroll-all-loops -global-hoist -march=haswell -qopt-prefetch=5 -unroll-aggressive -xhaswell -no-multibyte-chars -std=gnu99 -Ofast -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: square_dgemm(int, double *, double *, double *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (square_dgemm(int, double *, double *, double *__restrict__)) [1/1=100.0%] dgemm-naive.c(23,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm-naive.c(24,2)
   remark #25440: unrolled and jammed by 4   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm-naive.c(25,3)
      remark #25440: unrolled and jammed by 4   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25018: Total number of lines prefetched=4
      remark #25035: Number of pointer data prefetches=4, dist=10

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.580
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 152 
         remark #15477: vector cost: 35.750 
         remark #15478: estimated potential speedup: 4.040 
         remark #15488: --- end vector cost summary ---
         remark #25018: Total number of lines prefetched=8
         remark #25035: Number of pointer data prefetches=8, dist=8
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm-naive.c(25,3)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1000

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.950
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 38 
         remark #15477: vector cost: 10.000 
         remark #15478: estimated potential speedup: 3.610 
         remark #15488: --- end vector cost summary ---
         remark #25018: Total number of lines prefetched=5
         remark #25035: Number of pointer data prefetches=5, dist=8
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm-naive.c(24,2)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm-naive.c(25,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25018: Total number of lines prefetched=1
      remark #25035: Number of pointer data prefetches=1, dist=27

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference C[i+j*n] has unaligned access   [ dgemm-naive.c(27,5) ]
         remark #15389: vectorization support: reference A[i+k*n] has unaligned access   [ dgemm-naive.c(27,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 4.640 
         remark #15488: --- end vector cost summary ---
         remark #25018: Total number of lines prefetched=2
         remark #25035: Number of pointer data prefetches=2, dist=8
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END

      LOOP BEGIN at dgemm-naive.c(26,4)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1000
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

dgemm-naive.c(23,1):remark #34051: REGISTER ALLOCATION : [square_dgemm] dgemm-naive.c:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     380
            Global    :     138
            Local     :     242
        Regenerable   :       3
        Spilled       :      81
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     952 bytes*
            Reads     :     143 [3.62e+03 ~ 8.7%]
            Writes    :      91 [1.77e+03 ~ 4.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
